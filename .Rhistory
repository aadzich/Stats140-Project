plot(actor_graph_undirected,
vertex.size = 10,
vertex.color = "lightcoral",
edge.width = 4,
edge.label.font = 4,
edge.label = n_actor_pairs$Pairings,
edge.color = "gray",
edge.label.family = "Helvetica",
edge.label.cex = 1.2,
vertex.label.font = 4,
vertex.frame.color = "white",
vertex.label.font = 4,      # Set font to bold
vertex.label.cex = .8,    # Control the size of the labels
vertex.label.color = "black", # Change label color
vertex.label.family = "Helvetica"  # Change the font family (you can use other available fonts)
)
plot(actor_graph_undirected,
vertex.size = 10,
vertex.color = "lightcoral",
edge.width = 4,
edge.label.font = 4,
edge.label = n_actor_pairs$Pairings,
edge.color = "gray",
edge.label.family = "Helvetica",
edge.label.cex = 1.2,
vertex.label.font = 4,
vertex.frame.color = "white",
vertex.label.font = 4,      # Set font to bold
vertex.label.cex = .8,    # Control the size of the labels
vertex.label.color = "black", # Change label color
vertex.label.family = "Helvetica"  # Change the font family (you can use other available fonts)
)
plot(actor_graph_undirected,
vertex.size = 10,
vertex.color = "lightcoral",
edge.width = 4,
edge.label.font = 4,
edge.label = n_actor_pairs$Pairings,
edge.color = "gray",
edge.label.family = "Helvetica",
edge.label.cex = 1.2,
vertex.label.font = 4,
vertex.frame.color = "white",
vertex.label.font = 4,      # Set font to bold
vertex.label.cex = .8,    # Control the size of the labels
vertex.label.color = "black", # Change label color
vertex.label.family = "Helvetica"  # Change the font family (you can use other available fonts)
)
plot(actor_graph_undirected,
vertex.size = 10,
vertex.color = "lightcoral",
edge.width = 4,
edge.label.font = 4,
edge.label = n_actor_pairs$Pairings,
edge.color = "gray",
edge.label.family = "Helvetica",
edge.label.cex = 1.2,
vertex.label.font = 4,
vertex.frame.color = "white",
vertex.label.font = 4,      # Set font to bold
vertex.label.cex = .8,    # Control the size of the labels
vertex.label.color = "black", # Change label color
vertex.label.family = "Helvetica"  # Change the font family (you can use other available fonts)
)
par(bg = "white")
plot(actor_graph_undirected,
vertex.size = 10,
vertex.color = "lightcoral",
edge.width = 4,
edge.label.font = 4,
edge.label = n_actor_pairs$Pairings,
edge.color = "gray",
edge.label.family = "Helvetica",
edge.label.cex = 1.2,
vertex.label.font = 4,
vertex.frame.color = "white",
vertex.label.font = 4,      # Set font to bold
vertex.label.cex = .8,    # Control the size of the labels
vertex.label.color = "black", # Change label color
vertex.label.family = "Helvetica"  # Change the font family (you can use other available fonts)
)
# exploring actor pairs
library(tidyverse)
library(dplyr)
library(ggplot2)
library(igraph)
# import data
imdb <- read.csv("CURRENT_clean_imdbmovies_version5.csv", header = TRUE, stringsAsFactors = FALSE)
glimpse(imdb)
# turn genres into factors
imdb <- imdb %>%
mutate(
Broad_Genre = as.factor(Broad_Genre)
)
# Create all possible pairs of actors for each row
actor_pairs <- imdb %>%
rowwise() %>%
mutate(
Pair1 = paste(sort(c(Star1, Star2)), collapse = " & "),
Pair2 = paste(sort(c(Star1, Star3)), collapse = " & "),
Pair3 = paste(sort(c(Star1, Star4)), collapse = " & "),
Pair4 = paste(sort(c(Star2, Star3)), collapse = " & "),
Pair5 = paste(sort(c(Star2, Star4)), collapse = " & "),
Pair6 = paste(sort(c(Star3, Star4)), collapse = " & ")
) %>%
select(Pair1, Pair2, Pair3, Pair4, Pair5, Pair6, Revenue) %>%
pivot_longer(cols = starts_with("Pair"), names_to= "PairType",
values_to = "ActorPair")
actor_pairs
# anova on top 20 actor pairs
# run ANOVA and Tukey w this filtered data
pop_pairs_imdb <- actor_pairs %>%
group_by(ActorPair) %>%
filter(n() >= 3) %>%
ungroup() %>%
mutate(ActorPair = as.factor(ActorPair)) %>%
select(ActorPair, Revenue)
pop_pairs_imdb
table(pop_pairs_imdb$ActorPair)
anova_pop_pair <- aov(Revenue ~ ActorPair, data = pop_pairs_imdb)
summary(anova_pop_pair)
tukey_pop_pair <- TukeyHSD(anova_pop_pair)
tukey_pop_pair$ActorPair
tukey_sig <- tukey_pop_pair$ActorPair %>%
as.data.frame() %>%
filter(`p adj` < .05)
tukey_sig
actor_data <- actor_data %>%
mutate(Franchise = case_when(
Actor %in% c("Robert Downey Jr", "Chris Evans", "Scarlett Johansson","Joe Russo") ~ "Marvel",
Actor %in% c("Daniel Radcliffe", "Emma Watson", "Rupert Grint") ~ "Harry Potter",
Actor %in% c("Harrison Ford", "Carrie Fisher", "Mark Hamill") ~ "Star Wars",
Actor %in% c("Tom Hanks", "Tim Allen") ~ "Toy Story",
Actor %in% c("Joe Pesci", "Robert De Niro", "Al Pacino", "Diane Keaton") ~ "Other",
TRUE ~ "N/A"
))
byactors <- imdb %>%
pivot_longer(
cols = c(Star1, Star2, Star3, Star4),
names_to = "StarRank",
values_to = "Actor"
) %>%
select(Actor, Revenue)
byactors <- actor_data %>%
mutate(Franchise = case_when(
Actor %in% c("Robert Downey Jr", "Chris Evans", "Scarlett Johansson","Joe Russo") ~ "Marvel",
Actor %in% c("Daniel Radcliffe", "Emma Watson", "Rupert Grint") ~ "Harry Potter",
Actor %in% c("Harrison Ford", "Carrie Fisher", "Mark Hamill") ~ "Star Wars",
Actor %in% c("Tom Hanks", "Tim Allen") ~ "Toy Story",
Actor %in% c("Joe Pesci", "Robert De Niro", "Al Pacino", "Diane Keaton") ~ "Other",
TRUE ~ "N/A"
))
byactors <- byactors %>%
mutate(Franchise = case_when(
Actor %in% c("Robert Downey Jr", "Chris Evans", "Scarlett Johansson","Joe Russo") ~ "Marvel",
Actor %in% c("Daniel Radcliffe", "Emma Watson", "Rupert Grint") ~ "Harry Potter",
Actor %in% c("Harrison Ford", "Carrie Fisher", "Mark Hamill") ~ "Star Wars",
Actor %in% c("Tom Hanks", "Tim Allen") ~ "Toy Story",
Actor %in% c("Joe Pesci", "Robert De Niro", "Al Pacino", "Diane Keaton") ~ "Other",
TRUE ~ "N/A"
))
byactors
# Calculate the average revenue per franchise
franchise_avg_revenue <- byactors %>%
group_by(Franchise) %>%
summarize(AvgRevenue = mean(Revenue, na.rm = TRUE), Movies_Total = n(), .groups = 'drop')
# View the results
print(franchise_avg_revenue)
# View the results
anova_result <- aov(Revenue ~ Franchise, data = by_actors)
# Display ANOVA results
summary(anova_result)
# View the results
popfranchises <- byactors %>% filter(Franchise == "N/A")
anova_result <- aov(Revenue ~ Franchise, data = popfranchises)
byactors <- imdb %>%
pivot_longer(
cols = c(Star1, Star2, Star3, Star4),
names_to = "StarRank",
values_to = "Actor"
) %>%
select(Actor, Revenue)
byactors <- byactors %>%
mutate(Franchise = case_when(
Actor %in% c("Robert Downey Jr", "Chris Evans", "Scarlett Johansson","Joe Russo") ~ "Marvel",
Actor %in% c("Daniel Radcliffe", "Emma Watson", "Rupert Grint") ~ "Harry Potter",
Actor %in% c("Harrison Ford", "Carrie Fisher", "Mark Hamill") ~ "Star Wars",
Actor %in% c("Tom Hanks", "Tim Allen") ~ "Toy Story",
Actor %in% c("Joe Pesci", "Robert De Niro", "Al Pacino", "Diane Keaton") ~ "Other",
TRUE ~ "N/A"
))
byactors
# Calculate the average revenue per franchise
franchise_avg_revenue <- byactors %>%
group_by(Franchise) %>%
summarize(AvgRevenue = mean(Revenue, na.rm = TRUE), Movies_Total = n(), .groups = 'drop')
# View the results
popfranchises <- byactors %>% filter(Franchise != "N/A")
anova_result <- aov(Revenue ~ Franchise, data = popfranchises)
# Display ANOVA results
summary(anova_result)
tukey_franchise <- TukeyHSD(anova_result)
tukey_franchise$Franchise
tukey_sig <- tukey_franchise$Franchise %>%
as.data.frame() %>%
filter(`p adj` < .05)
tukey_sig
# grped anova across genres
ggplot(pop_actor_imdb, aes(x = Actor, y = Revenue, fill = Actor)) +
geom_boxplot() +
labs(title = "Revenue Distribution Across Different Actors",
x = "Actor",
y = "Revenue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
scale_y_continuous(labels=function(x) format(x, big.mark = ",", scientific = FALSE))
# revenue across top stars
library(tidyverse)
library(dplyr)
# import data
imdb <- read.csv("CURRENT_clean_imdbmovies_version5.csv", header = TRUE, stringsAsFactors = FALSE)
glimpse(imdb)
# turn genres into factors
imdb <- imdb %>%
mutate(
Broad_Genre = as.factor(Broad_Genre)
)
levels(imdb$Broad_Genre)
table(imdb$Broad_Genre)
# now want to encode actors, but consistent across columns
# pivot longer to be by actors, and find avg rev
actor_imdb <- imdb %>%
pivot_longer(cols = c(Star1, Star2, Star3, Star4),
names_to = "StarVal",
values_to = "Actor") %>%
mutate(Actor = as.factor(Actor))
# avg revenue across actors
avg_actor_imdb <- actor_imdb %>%
group_by(Actor) %>%
summarize(AvgRev = mean(Revenue), MovieCount = n())
glimpse(actor_imdb)
# approach 1: limit analysis to only the very top actors
# (who have acted in at least 8 top movies)
pop_actor_imdb <- actor_imdb %>%
group_by(Actor) %>%
filter(n() >= 10) %>%
ungroup() %>%
mutate(Actor = as.factor(Actor))
pop_actor_imdb <- droplevels(pop_actor_imdb)
pop_actor_imdb
# now to do an ANOVA test to see if there's a significant diff
# in revenue between movies featuring different actors
anova_pop_actor <- aov(Revenue ~ Actor, data = pop_actor_imdb)
summary(anova_pop_actor)
summary(anova_pop_actor)[[1]][["Pr(>F)"]][1]
table(pop_actor_imdb$Actor)
# now can do Tukey test to compare which actors differ significantly
tukey_pop_actor <- TukeyHSD(anova_pop_actor)
tukey_pop_actor$Actor
# filter only significant comparisons
tukey_sig <- tukey_pop_actor$Actor %>%
as.data.frame() %>%
filter(`p adj` < .05)
tukey_sig
# grped anova across genres
ggplot(pop_actor_imdb, aes(x = Actor, y = Revenue, fill = Actor)) +
geom_boxplot() +
labs(title = "Revenue Distribution Across Different Actors",
x = "Actor",
y = "Revenue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
scale_y_continuous(labels=function(x) format(x, big.mark = ",", scientific = FALSE))
anova_result <- aov(Revenue ~ ActorPair, data = pair_revenue_10)
# Display ANOVA results
summary(anova_result)
tukey_franchise <- TukeyHSD(anova_result)
tukey_franchise$Franchise
anova_result <- aov(Revenue ~ ActorPair, data = pair_revenue_10)
# Display ANOVA results
summary(anova_result)
tukey_poppair <- TukeyHSD(anova_result)
tukey_poppair$ActorPair
pair_revenue
pair_revenue_10
# anova on top 20 actor pairs
# run ANOVA and Tukey w this filtered data
pop_pairs_imdb <- actor_pairs %>%
group_by(ActorPair) %>%
filter(n() >= 3) %>%
ungroup() %>%
mutate(ActorPair = as.factor(ActorPair)) %>%
select(ActorPair, Revenue)
pop_pairs_imdb
table(pop_pairs_imdb$ActorPair)
anova_pop_pair <- aov(Revenue ~ ActorPair, data = pop_pairs_imdb)
summary(anova_pop_pair)
tukey_pop_pair <- TukeyHSD(anova_pop_pair)
tukey_pop_pair$ActorPair
tukey_sig <- tukey_pop_pair$ActorPair %>%
as.data.frame() %>%
filter(`p adj` < .05)
tukey_sig
pair_revenue_10 <- pair_revenue %>% split(10)
pair_revenue_10
pair_revenue_10 <- pair_revenue %>% head(10)
pair_revenue
pair_revenue_10 <- pair_revenue %>% split(10)
pair_revenue_10
# anova on top 20 actor pairs
# run ANOVA and Tukey w this filtered data
pop_pairs_imdb <- actor_pairs %>%
group_by(ActorPair) %>%
filter(n() >= 3) %>%
ungroup() %>%
mutate(ActorPair = as.factor(ActorPair)) %>%
select(ActorPair, Revenue)
pop_pairs_imdb
table(pop_pairs_imdb$ActorPair)
anova_pop_pair <- aov(Revenue ~ ActorPair, data = pop_pairs_imdb)
summary(anova_pop_pair)
anova_data <- pair_data %>%
filter(ActorPair %in% pair_revenue_10$ActorPair)
anova_data <- actor_pairs %>%
filter(ActorPair %in% pair_revenue_10$ActorPair)
# Perform ANOVA
anova_top_pairs <- aov(Revenue ~ ActorPair, data = anova_data)
# Display the summary of the ANOVA
summary(anova_top_pairs)
anova_data
anova_data <- pop_pairs_imdb %>%
filter(ActorPair %in% pair_revenue_10$ActorPair)
anova_data
# Perform ANOVA
anova_top_pairs <- aov(Revenue ~ ActorPair, data = anova_data)
# exploring actor pairs
library(tidyverse)
library(dplyr)
library(ggplot2)
library(igraph)
# import data
imdb <- read.csv("CURRENT_clean_imdbmovies_version5.csv", header = TRUE, stringsAsFactors = FALSE)
glimpse(imdb)
# turn genres into factors
imdb <- imdb %>%
mutate(
Broad_Genre = as.factor(Broad_Genre)
)
# Create all possible pairs of actors for each row
actor_pairs <- imdb %>%
rowwise() %>%
mutate(
Pair1 = paste(sort(c(Star1, Star2)), collapse = " & "),
Pair2 = paste(sort(c(Star1, Star3)), collapse = " & "),
Pair3 = paste(sort(c(Star1, Star4)), collapse = " & "),
Pair4 = paste(sort(c(Star2, Star3)), collapse = " & "),
Pair5 = paste(sort(c(Star2, Star4)), collapse = " & "),
Pair6 = paste(sort(c(Star3, Star4)), collapse = " & ")
) %>%
select(Pair1, Pair2, Pair3, Pair4, Pair5, Pair6, Revenue) %>%
pivot_longer(cols = starts_with("Pair"), names_to= "PairType",
values_to = "ActorPair")
actor_pairs
# anova on top 20 actor pairs
# run ANOVA and Tukey w this filtered data
pop_pairs_imdb <- actor_pairs %>%
group_by(ActorPair) %>%
filter(n() >= 3) %>%
ungroup() %>%
mutate(ActorPair = as.factor(ActorPair)) %>%
select(ActorPair, Revenue)
pop_pairs_imdb
table(pop_pairs_imdb$ActorPair)
anova_pop_pair <- aov(Revenue ~ ActorPair, data = pop_pairs_imdb)
summary(anova_pop_pair)
tukey_pop_pair <- TukeyHSD(anova_pop_pair)
tukey_pop_pair$ActorPair
tukey_sig <- tukey_pop_pair$ActorPair %>%
as.data.frame() %>%
filter(`p adj` < .05)
tukey_sig
anova_data <- actor_pairs %>%
filter(ActorPair %in% pair_revenue_10$ActorPair)
# Reshape the data to a long format for easier aggregation
pair_revenue <- actor_pairs %>%
group_by(ActorPair) %>%
summarise(Avg_Revenue = mean(Revenue, na.rm = TRUE),
Pairings = n()) %>%
arrange(desc(Pairings))
pair_revenue_10 <- pair_revenue %>% head(10)
pair_revenue_10
anova_data <- actor_pairs %>%
filter(ActorPair %in% pair_revenue_10$ActorPair)
anova_data
# Perform ANOVA
anova_top_pairs <- aov(Revenue ~ ActorPair, data = anova_data)
# Display the summary of the ANOVA
summary(anova_top_pairs)
# Display the summary of the ANOVA
summary(anova_top_pairs)
tukey_top_pairs <- TukeyHSD(anova_top_pairs)
tukey_top_pairs$ActorPair
tukey_sig <- tukey_top_pairs$ActorPair %>%
as.data.frame() %>%
filter(`p adj` < .05)
tukey_sig
# Display the summary of the ANOVA
summary(anova_top_pairs)
# exploring actor pairs
library(tidyverse)
library(dplyr)
library(ggplot2)
library(igraph)
# import data
imdb <- read.csv("CURRENT_clean_imdbmovies_version5.csv", header = TRUE, stringsAsFactors = FALSE)
glimpse(imdb)
# turn genres into factors
imdb <- imdb %>%
mutate(
Broad_Genre = as.factor(Broad_Genre)
)
# Create all possible pairs of actors for each row
actor_pairs <- imdb %>%
rowwise() %>%
mutate(
Pair1 = paste(sort(c(Star1, Star2)), collapse = " & "),
Pair2 = paste(sort(c(Star1, Star3)), collapse = " & "),
Pair3 = paste(sort(c(Star1, Star4)), collapse = " & "),
Pair4 = paste(sort(c(Star2, Star3)), collapse = " & "),
Pair5 = paste(sort(c(Star2, Star4)), collapse = " & "),
Pair6 = paste(sort(c(Star3, Star4)), collapse = " & ")
) %>%
select(Pair1, Pair2, Pair3, Pair4, Pair5, Pair6, Revenue) %>%
pivot_longer(cols = starts_with("Pair"), names_to= "PairType",
values_to = "ActorPair")
actor_pairs
# anova on top 20 actor pairs
# run ANOVA and Tukey w this filtered data
pop_pairs_imdb <- actor_pairs %>%
group_by(ActorPair) %>%
filter(n() >= 3) %>%
ungroup() %>%
mutate(ActorPair = as.factor(ActorPair)) %>%
select(ActorPair, Revenue)
pop_pairs_imdb
table(pop_pairs_imdb$ActorPair)
anova_pop_pair <- aov(Revenue ~ ActorPair, data = pop_pairs_imdb)
summary(anova_pop_pair)
tukey_pop_pair <- TukeyHSD(anova_pop_pair)
tukey_pop_pair$ActorPair
tukey_sig <- tukey_pop_pair$ActorPair %>%
as.data.frame() %>%
filter(`p adj` < .05)
tukey_sig
anova_data <- actor_pairs %>%
filter(ActorPair %in% pair_revenue_10$ActorPair)
anova_data
# Perform ANOVA
anova_top_pairs <- aov(Revenue ~ ActorPair, data = anova_data)
# Display the summary of the ANOVA
summary(anova_top_pairs)
tukey_top_pairs <- TukeyHSD(anova_top_pairs)
tukey_top_pairs$ActorPair
tukey_sig <- tukey_top_pairs$ActorPair %>%
as.data.frame() %>%
filter(`p adj` < .05)
tukey_sig
# Reshape the data to a long format for easier aggregation
pair_revenue <- actor_pairs %>%
group_by(ActorPair) %>%
summarise(Avg_Revenue = mean(Revenue, na.rm = TRUE),
Pairings = n()) %>%
arrange(desc(Pairings))
pair_revenue_10 <- pair_revenue %>% head(10)
pair_revenue_10
# Plot the top 10 pairs with the most revenue
ggplot(pair_revenue_10, aes(x = reorder(ActorPair, Avg_Revenue), y = Avg_Revenue)) +
geom_bar(stat = "identity", fill = "darkred") +
coord_flip() +
labs(title = "10 Most Popular Actor Pairs by Average Revenue",
x = "Actor Pair",
y = "Total Revenue (in $)") +
theme_minimal() +
scale_y_continuous(labels=function(x) format(x, big.mark = ",", scientific = FALSE))
anova_result <- aov(Revenue ~ ActorPair, data = pair_revenue_10)
# Display ANOVA results
summary(anova_result)
tukey_poppair <- TukeyHSD(anova_result)
tukey_poppair$ActorPair
pair_revenue_10
byactors <- imdb %>%
pivot_longer(
cols = c(Star1, Star2, Star3, Star4),
names_to = "StarRank",
values_to = "Actor"
) %>%
select(Actor, Revenue)
byactors <- byactors %>%
mutate(Franchise = case_when(
Actor %in% c("Robert Downey Jr", "Chris Evans", "Scarlett Johansson","Joe Russo") ~ "Marvel",
Actor %in% c("Daniel Radcliffe", "Emma Watson", "Rupert Grint") ~ "Harry Potter",
Actor %in% c("Harrison Ford", "Carrie Fisher", "Mark Hamill") ~ "Star Wars",
Actor %in% c("Tom Hanks", "Tim Allen") ~ "Toy Story",
Actor %in% c("Joe Pesci", "Robert De Niro", "Al Pacino", "Diane Keaton") ~ "Other",
TRUE ~ "N/A"
))
byactors
# Calculate the average revenue per franchise
franchise_avg_revenue <- byactors %>%
group_by(Franchise) %>%
summarize(AvgRevenue = mean(Revenue, na.rm = TRUE), Movies_Total = n(), .groups = 'drop')
franchise_avg_revenue
